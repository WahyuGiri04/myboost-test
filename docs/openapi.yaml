openapi: 3.0.3
info:
  title: Purchase Order CRUD API
  version: 1.0.0
  description: |
    REST API for managing users, catalog items, and purchase orders. The service exposes CRUD endpoints for
    each aggregate and calculates purchase order totals based on submitted detail lines.
servers:
  - url: http://localhost:8080
    description: Local development
  - url: http://localhost:8080/api
    description: Convenience server when tooling expects base path mounted at /api
paths:
  /api/users:
    get:
      tags: [Users]
      summary: List users
      description: Returns all users or filters by identifier when the optional query parameter is provided.
      parameters:
        - name: id
          in: query
          required: false
          description: Optional identifier used to retrieve a single user.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
              examples:
                default:
                  value:
                    - id: 1
                      firstName: Jane
                      lastName: Doe
                      email: jane.doe@example.com
                      phone: '+62-811-1234'
                      createdBy: system
                      updatedBy: system
                      createdDatetime: 2025-09-20T08:00:00Z
                      updatedDatetime: 2025-09-20T08:00:00Z
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Users]
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              default:
                value:
                  firstName: Jane
                  lastName: Doe
                  email: jane.doe@example.com
                  phone: '+62-811-1234'
                  createdBy: admin
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/users/{id}:
    put:
      tags: [Users]
      summary: Update user
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
            examples:
              default:
                value:
                  firstName: Janet
                  lastName: Doe
                  email: janet.doe@example.com
                  phone: '+62-811-9876'
                  updatedBy: admin
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Users]
      summary: Delete user
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '204':
          description: User deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/items:
    get:
      tags: [Items]
      summary: List catalog items
      description: Returns all catalog items or a single entry when filtered by identifier.
      parameters:
        - name: id
          in: query
          required: false
          description: Optional identifier used to retrieve a single item.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [Items]
      summary: Create catalog item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
            examples:
              default:
                value:
                  name: Laptop
                  description: 14" ultrabook
                  price: 15000000
                  cost: 13500000
                  createdBy: admin
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/items/{id}:
    put:
      tags: [Items]
      summary: Update catalog item
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemRequest'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [Items]
      summary: Delete catalog item
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '204':
          description: Item deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/purchase-orders:
    get:
      tags: ['Purchase Orders']
      summary: List purchase orders
      description: Returns purchase order headers together with nested detail lines. Filter by identifier using the optional query parameter.
      parameters:
        - name: id
          in: query
          required: false
          description: Optional identifier used to retrieve a single purchase order.
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Purchase orders retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PurchaseOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: ['Purchase Orders']
      summary: Create purchase order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderRequest'
            examples:
              default:
                value:
                  poDatetime: 2025-09-20T08:30:00Z
                  description: Initial office equipment order
                  details:
                    - itemId: 1
                      itemQty: 2
                      itemCost: 12000000
                      itemPrice: 15000000
                      createdBy: buyer
                    - itemId: 2
                      itemQty: 5
                      itemCost: 500000
                      itemPrice: 750000
                  createdBy: buyer
      responses:
        '201':
          description: Purchase order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/purchase-orders/{id}:
    put:
      tags: ['Purchase Orders']
      summary: Update purchase order
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PurchaseOrderRequest'
      responses:
        '200':
          description: Purchase order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PurchaseOrderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: ['Purchase Orders']
      summary: Delete purchase order
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '204':
          description: Purchase order deleted successfully
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  parameters:
    PathId:
      name: id
      in: path
      required: true
      description: Unique identifier of the resource.
      schema:
        type: integer
        format: int32
  responses:
    BadRequest:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            validationError:
              value:
                timestamp: 2025-09-20T08:00:00Z
                status: 400
                error: Bad Request
                message: Validation failed
                errors:
                  - field: firstName
                    message: must not be blank
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            notFound:
              value:
                timestamp: 2025-09-20T08:00:00Z
                status: 404
                error: Not Found
                message: User with id 99 not found
    InternalServerError:
      description: Unexpected server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            generic:
              value:
                timestamp: 2025-09-20T08:00:00Z
                status: 500
                error: Internal Server Error
                message: An unexpected error occurred
  schemas:
    UserRequest:
      type: object
      required: [firstName, lastName, email]
      properties:
        firstName:
          type: string
          maxLength: 500
        lastName:
          type: string
          maxLength: 500
        email:
          type: string
          format: email
          maxLength: 255
        phone:
          type: string
          maxLength: 50
        createdBy:
          type: string
          maxLength: 100
        updatedBy:
          type: string
          maxLength: 100
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        createdBy:
          type: string
        updatedBy:
          type: string
        createdDatetime:
          type: string
          format: date-time
        updatedDatetime:
          type: string
          format: date-time
    ItemRequest:
      type: object
      required: [name, price, cost]
      properties:
        name:
          type: string
          maxLength: 500
        description:
          type: string
          maxLength: 500
        price:
          type: integer
          format: int32
          minimum: 0
        cost:
          type: integer
          format: int32
          minimum: 0
        createdBy:
          type: string
          maxLength: 100
        updatedBy:
          type: string
          maxLength: 100
    ItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int32
        cost:
          type: integer
          format: int32
        createdBy:
          type: string
        updatedBy:
          type: string
        createdDatetime:
          type: string
          format: date-time
        updatedDatetime:
          type: string
          format: date-time
    PurchaseOrderDetailRequest:
      type: object
      required: [itemId, itemQty, itemCost, itemPrice]
      properties:
        itemId:
          type: integer
          format: int32
        itemQty:
          type: integer
          format: int32
          minimum: 1
        itemCost:
          type: integer
          format: int32
          minimum: 0
        itemPrice:
          type: integer
          format: int32
          minimum: 0
        createdBy:
          type: string
          maxLength: 100
        updatedBy:
          type: string
          maxLength: 100
    PurchaseOrderRequest:
      type: object
      required: [poDatetime, details]
      properties:
        poDatetime:
          type: string
          format: date-time
        description:
          type: string
          maxLength: 500
        details:
          type: array
          minItems: 1
          items:
            $ref: '#/components/schemas/PurchaseOrderDetailRequest'
        createdBy:
          type: string
          maxLength: 100
        updatedBy:
          type: string
          maxLength: 100
    PurchaseOrderDetailResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        item:
          $ref: '#/components/schemas/ItemResponse'
        itemQty:
          type: integer
          format: int32
        itemCost:
          type: integer
          format: int32
        itemPrice:
          type: integer
          format: int32
        createdBy:
          type: string
        updatedBy:
          type: string
        createdDatetime:
          type: string
          format: date-time
        updatedDatetime:
          type: string
          format: date-time
    PurchaseOrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int32
        poDatetime:
          type: string
          format: date-time
        description:
          type: string
        totalPrice:
          type: integer
          format: int32
        totalCost:
          type: integer
          format: int32
        details:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseOrderDetailResponse'
        createdBy:
          type: string
        updatedBy:
          type: string
        createdDatetime:
          type: string
          format: date-time
        updatedDatetime:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string
        errors:
          type: array
          description: Present only for validation errors.
          items:
            $ref: '#/components/schemas/ValidationError'
    ValidationError:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
